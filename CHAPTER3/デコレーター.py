# -*- coding: utf-8 -*-
"""デコレーター.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pONc8CC7J6ageUegU_ILmMgwml_lKEQi

# **3.7.1 デコレーターを使用する**
"""

!pip install retrying

# retryデコレーターを適用する例
import random
from retrying import retry

@retry
def my_func():
    if random.randint(0, 10) == 5:
        print('5です')
    else:
        print('raise ValueError')
        raise ValueError("5ではありません")

my_func()

# retryデコレーターに引数を指定する
@retry(stop_max_attempt_number=2)
def my_func():
    if random.randint(0, 10) == 5:
        print('5です')
    else:
        print('raise ValueError')
        raise ValueError("5ではありません")

my_func()

"""# **3.7.2 関数デコレーターを自作する**"""

# 関数内に関数を定義する
def func_greeting(name):
    def print_greeting():       # 関数のなかに関数を定義できる
        print(f'こんにちは。{name}さん')
    return print_greeting       # 関数を返すことができる

func = func_greeting('john')
print(func)
print(func())

# 関数を別の関数への引数として与える
def after_greeting(func, name):
    func(name)
    print('今日はいいお天気ですね')

def greeting(name):
    print(f'こんにちは。{name}さん')

after_greeting(greeting, 'john')

# デコレーター関数を作成し代入文を使用する例
def my_decorator(func):     # デコレーター関数
    def wrap_function():    # デコレーター対象の関数の代わりに呼び出されるラッパー関数
        func()
        print(f'function: {func.__name__} called')
    return wrap_function

def greeting():
    print('こんにちは')

greeting = my_decorator(greeting)       # (1)デコレーター構文と等価である代入文を使用
greeting()

# 「@デコレーター名」構文を使用して置き換える
@my_decorator
def greeting():
    print('こんにちは')

print(greeting)
print(greeting())